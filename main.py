import logging
import re
from datetime import datetime
from tempmail import TempMail

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackContext, CallbackQueryHandler

# ‡¶≤‡¶ó‡¶ø‡¶Ç ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ‡¶∏‡ßç‡¶ü‡¶æ‡¶∞‡ßç‡¶ü ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
def start(update: Update, context: CallbackContext) -> None:
    """/start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¶‡¶ø‡¶≤‡ßá ‡¶è‡¶á ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ü‡¶ø ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶¨‡ßá‡•§"""
    welcome_message = """
üëã *‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ!*

‡¶Ü‡¶Æ‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡ßç‡¶¨‡ßü‡¶Ç‡¶ï‡ßç‡¶∞‡¶ø‡ßü ‡¶ü‡ßá‡¶Æ‡ßç‡¶™‡ßã‡¶∞‡¶æ‡¶∞‡¶ø ‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶¨‡¶ü‡•§

‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßá ‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ö‡¶∏‡ßç‡¶•‡¶æ‡ßü‡ßÄ ‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶è‡¶¨‡¶Ç ‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶ó‡ßç‡¶∞‡¶π‡¶£ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®‡•§

/getnew ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶®‡¶§‡ßÅ‡¶® ‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®‡•§
    """
    update.message.reply_text(welcome_message, parse_mode='Markdown')

# ‡¶®‡¶§‡ßÅ‡¶® ‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
def generate_new_email(update: Update, context: CallbackContext) -> None:
    """‡¶è‡¶ï‡¶ü‡¶ø ‡¶®‡¶§‡ßÅ‡¶® ‡¶Ö‡¶∏‡ßç‡¶•‡¶æ‡ßü‡ßÄ ‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá‡•§"""
    try:
        # temp-mail ‡¶≤‡¶æ‡¶á‡¶¨‡ßç‡¶∞‡ßá‡¶∞‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶§‡ßà‡¶∞‡¶ø
        tm = TempMail()
        email = tm.get_email()

        if not email or "@" not in email:
            raise ValueError("API ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶†‡¶ø‡¶ï ‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§")

        # ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ ‡¶ì ‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø ‡¶°‡ßá‡¶ü‡¶æ ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡¶æ
        context.user_data['email'] = email
        context.user_data['last_checked_ids'] = set()
        context.user_data['tempmail_instance'] = tm

        keyboard = [[InlineKeyboardButton("üîÑ Change Email", callback_data='change_email')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        message = f"‚úÖ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡¶§‡ßÅ‡¶® ‡¶Ö‡¶∏‡ßç‡¶•‡¶æ‡ßü‡ßÄ ‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ:\n\n`{email}`\n\n‡¶è‡¶á ‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ‡ßü ‡¶ï‡ßã‡¶®‡ßã ‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶è‡¶≤‡ßá ‡¶Ü‡¶Æ‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶ú‡¶æ‡¶®‡¶ø‡ßü‡ßá ‡¶¶‡ßá‡¶¨‡•§"
        
        # ‡¶Ø‡¶¶‡¶ø ‡¶ï‡ßã‡¶®‡ßã ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶¨‡¶æ‡¶ü‡¶® ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡¶≤ ‡¶ï‡¶∞‡ßá, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶è‡¶°‡¶ø‡¶ü ‡¶π‡¶¨‡ßá
        if update.callback_query:
            update.callback_query.edit_message_text(text=message, reply_markup=reply_markup, parse_mode='Markdown')
        else: # ‡¶Ø‡¶¶‡¶ø ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡¶≤ ‡¶π‡ßü
            update.message.reply_text(message, reply_markup=reply_markup, parse_mode='Markdown')

        # ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶ó‡ßç‡¶∞‡¶æ‡¶â‡¶®‡ßç‡¶°‡ßá ‡¶á‡¶®‡¶¨‡¶ï‡ßç‡¶∏ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶¨ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ
        job_name = str(update.effective_chat.id)
        # ‡¶™‡ßÅ‡¶∞‡¶®‡ßã ‡¶ú‡¶¨ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶∞‡¶ø‡¶Æ‡ßÅ‡¶≠ ‡¶ï‡¶∞‡¶æ
        current_jobs = context.job_queue.get_jobs_by_name(job_name)
        if current_jobs:
            for job in current_jobs:
                job.schedule_removal()
        
        context.job_queue.run_repeating(check_inbox, interval=15, first=0, context=update.effective_chat.id, name=job_name)

    except Exception as e:
        logger.error(f"Error generating new email: {e}")
        error_message = "‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶è‡¶á ‡¶Æ‡ßÅ‡¶π‡ßÇ‡¶∞‡ßç‡¶§‡ßá ‡¶®‡¶§‡ßÅ‡¶® ‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶ö‡ßç‡¶õ‡ßá ‡¶®‡¶æ‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶ï‡¶ø‡¶õ‡ßÅ‡¶ï‡ßç‡¶∑‡¶£ ‡¶™‡¶∞ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§"
        if update.callback_query:
            update.callback_query.answer(error_message, show_alert=True)
        else:
            update.message.reply_text(error_message)


# OTP ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏ ‡¶®‡¶æ‡¶Æ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
def extract_otp_and_service(text_body):
    """‡¶á‡¶Æ‡ßá‡¶á‡¶≤‡ßá‡¶∞ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶•‡ßá‡¶ï‡ßá OTP ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏ ‡¶®‡¶æ‡¶Æ ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßá‡•§"""
    otp, service = "N/A", "N/A"
    
    # ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶ø‡¶∏ ‡¶®‡¶æ‡¶Æ ‡¶ñ‡ßã‡¶Å‡¶ú‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ
    service_match = re.search(r'(?:The\s)?(Telegram|Google|Facebook|Twitter|Instagram|Amazon|Netflix)\sTeam', text_body, re.IGNORECASE)
    if not service_match:
        service_match = re.search(r'verify your (Telegram|Google|Facebook|Twitter|Instagram|Amazon|Netflix) account', text_body, re.IGNORECASE)
    
    if service_match:
        service = service_match.group(1).capitalize()

    # ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ OTP ‡¶™‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ñ‡ßã‡¶Å‡¶ú‡¶æ (‡ß™ ‡¶•‡ßá‡¶ï‡ßá ‡ßÆ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶ï‡ßã‡¶°)
    otp_match = re.search(r'Your code is:?\s*(\d{4,8})\b|verification code:?\s*(\d{4,8})\b|\b(\d{4,8})\b is your verification code', text_body, re.IGNORECASE)
    if otp_match:
        # re.search ‡¶è‡¶ï‡¶æ‡¶ß‡¶ø‡¶ï ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶•‡ßá‡¶ï‡ßá ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ö ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá, ‡¶§‡¶æ‡¶á ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶Ø‡ßá‡¶ü‡¶ø ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü ‡¶∏‡ßá‡¶ü‡¶ø ‡¶®‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
        otp = next((group for group in otp_match.groups() if group is not None), "N/A")

    return service, otp


# ‡¶á‡¶®‡¶¨‡¶ï‡ßç‡¶∏ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® (‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶ó‡ßç‡¶∞‡¶æ‡¶â‡¶®‡ßç‡¶°‡ßá ‡¶ö‡¶≤‡¶¨‡ßá)
def check_inbox(context: CallbackContext) -> None:
    """‡¶∏‡ßç‡¶¨‡ßü‡¶Ç‡¶ï‡ßç‡¶∞‡¶ø‡ßü‡¶≠‡¶æ‡¶¨‡ßá ‡¶®‡¶§‡ßÅ‡¶® ‡¶á‡¶Æ‡ßá‡¶á‡¶≤‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶á‡¶®‡¶¨‡¶ï‡ßç‡¶∏ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßá‡•§"""
    chat_id = context.job.context
    user_data = context.dispatcher.user_data.get(chat_id, {})
    
    email = user_data.get('email')
    tm = user_data.get('tempmail_instance')
    
    if not email or not tm:
        return

    try:
        inbox = tm.get_inbox()

        if not isinstance(inbox, list):
            return

        last_checked_ids = user_data.get('last_checked_ids', set())
        
        for mail in inbox:
            # ‡¶≤‡¶æ‡¶á‡¶¨‡ßç‡¶∞‡ßá‡¶∞‡¶ø ‡¶•‡ßá‡¶ï‡ßá mail_id ‡¶¨‡¶æ ‡¶á‡¶â‡¶®‡¶ø‡¶ï ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶ó‡ßá‡¶≤‡ßá ‡¶∏‡ßá‡¶ü‡¶æ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶≠‡¶æ‡¶≤‡ßã
            # ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ü‡¶Æ‡¶∞‡¶æ subject ‡¶è‡¶¨‡¶Ç from ‡¶¶‡¶ø‡ßü‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶á‡¶â‡¶®‡¶ø‡¶ï ‡¶Ü‡¶á‡¶°‡¶ø ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶õ‡¶ø
            mail_unique_id = f"{mail['from']}_{mail['subject']}"
            
            if mail_unique_id not in last_checked_ids:
                # ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶ï‡¶∞‡¶æ
                full_message_body = mail.get('body_text', 'No content')
                service, otp = extract_otp_and_service(full_message_body)
                
                # ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶§‡ßà‡¶∞‡¶ø
                formatted_message = f"""
*New Email Received* üì¨

üï∞ *Time:* {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
‚úâÔ∏è *Email:* {email}
üì± *Service:* {service}
üîë *OTP:* `{otp}` üëà (Tap to copy)

---
‚úâÔ∏è *Full Message:*
{full_message_body}
                """
                context.bot.send_message(chat_id=chat_id, text=formatted_message, parse_mode='Markdown')
                last_checked_ids.add(mail_unique_id)
        
        user_data['last_checked_ids'] = last_checked_ids

    except Exception as e:
        logger.error(f"Could not check inbox for {email}: {e}")

def main() -> None:
    """‡¶¨‡¶ü‡¶ü‡¶ø ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡ßá‡•§"""
    # ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶ü‡ßá‡¶∞ ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶¶‡¶ø‡¶®
    updater = Updater("8064236020:AAGS_PO-PcQAu8dCcoJMTRjQzBMtJ8TlR4g")

    dispatcher = updater.dispatcher

    # ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("getnew", generate_new_email))
    
    # ‡¶¨‡¶æ‡¶ü‡¶® ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡¶≤‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
    dispatcher.add_handler(CallbackQueryHandler(generate_new_email, pattern='^change_email$'))

    # ‡¶¨‡¶ü ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡¶æ
    updater.start_polling()
    logger.info("Bot has started.")

    updater.idle()

if __name__ == '__main__':
    main()
